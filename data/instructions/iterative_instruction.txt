Given an SQL query template with column types highlighted (e.g., text, numerical), 
create a Python function that dynamically adapts this SQL template to a specific table. 
The function should take as input a table name and a dictionary mapping column names to their respective types (e.g., ‘text’, ‘numerical’).
 It should intelligently replace placeholders in the template with actual column names based on their types while preserving the SQL query structure. 
 The output should be a valid SQL query adapted to the given table. The function must handle edge cases where insufficient columns of a given type exist
 Example :

SELECT name, COUNT(id) 
FROM my_table 
GROUP BY name 
HAVING COUNT(id) > 5;

def generate_sql(table_name, column_types):
    """
    Generate an SQL query adapted to a specific table and column types.

    Parameters:
        table_name (str): The name of the table.
        column_types (dict): A dictionary mapping column names to their types (e.g., 'text', 'numerical').

    Returns:
        str: A dynamically generated SQL query.
    """
    text_columns = [col for col, col_type in column_types.items() if col_type == "text"]
    numerical_columns = [col for col, col_type in column_types.items() if col_type == "numerical"]

    if not text_columns or not numerical_columns:
        return "Error: The table must have at least one text and one numerical column."

    name_col = text_columns[0]  # Pick the first text column
    id_col = numerical_columns[0]  # Pick the first numerical column

    query = f"""
    SELECT {name_col}, COUNT({id_col}) 
    FROM {table_name} 
    GROUP BY {name_col} 
    HAVING COUNT({id_col}) > 5;
    """.strip()

    return query

    Your turn !
    